generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                           String        @id @default(uuid())
  name                         String
  email                        String        @unique
  password                     String?
  phone                        String?       @unique
  role                         UserRole      @default(CUSTOMER)
  isActive                     Boolean       @default(true)
  provider                     AuthProvider  @default(LOCAL)
  providerId                   String?
  avatar                       String?
  emailVerified                Boolean       @default(false)
  reputation                   Int           @default(0)
  lastLoginAt                  DateTime?
  createdAt                    DateTime      @default(now())
  updatedAt                    DateTime      @updatedAt
  flagCount                    Int           @default(0)
  flagReason                   String?
  isFlagged                    Boolean       @default(false)
  lastFlaggedAt                DateTime?
  reviewPattern                Json?
  unverifiedReviewCount        Int           @default(0)
  bio                          String?
  emailVerificationSentAt      DateTime?
  emailVerificationToken       String?
  emailVerificationTokenExpiry DateTime?
  passwordResetSentAt          DateTime?
  passwordResetToken           String?
  passwordResetTokenExpiry     DateTime?
  businesses                   Business[]
  fraudReports                 FraudReport[]
  reviews                      Review[]
  reviewReplies                ReviewReply[]
}

model Business {
  id                 String            @id @default(uuid())
  name               String
  description        String?
  category           String?
  website            String?
  phone              String?
  email              String?
  ownerId            String?
  location           String?
  latitude           Float?
  longitude          Float?
  isVerified         Boolean           @default(false)
  isActive           Boolean           @default(true)
  businessCategoryId String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  onboardingStep     Int               @default(1)
  rejectionReason    String?
  reviewNotes        String?
  reviewedAt         DateTime?
  reviewedBy         String?
  status             BusinessStatus    @default(PENDING)
  submittedForReview Boolean           @default(false)
  businessCategory   BusinessCategory? @relation(fields: [businessCategoryId], references: [id])
  owner              User?             @relation(fields: [ownerId], references: [id])
  documents          Document[]
  fraudReports       FraudReport[]
  payments           Payment[]
  reviews            Review[]
  trustScore         TrustScore?
}

model Document {
  id                String       @id @default(uuid())
  url               String
  verified          Boolean      @default(false)
  businessId        String
  uploadedAt        DateTime     @default(now())
  aiAnalysis        Json?
  aiVerified        Boolean      @default(false)
  aiVerifiedAt      DateTime?
  extractedData     Json?
  mimeType          String?
  name              String?
  ocrConfidence     Int?
  ocrText           String?
  size              Int?
  verificationNotes String?
  verifiedAt        DateTime?
  verifiedBy        String?
  type              DocumentType
  business          Business     @relation(fields: [businessId], references: [id])
}

model Review {
  id               String       @id @default(uuid())
  rating           Int
  comment          String?
  userId           String
  businessId       String
  credibility      Int          @default(0)
  isVerified       Boolean      @default(false)
  isActive         Boolean      @default(true)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  amount           Float?
  receiptData      Json?
  receiptUrl       String?
  reviewDate       DateTime?
  validationResult Json?
  business         Business     @relation(fields: [businessId], references: [id])
  user             User         @relation(fields: [userId], references: [id])
  replies          ReviewReply[]
}

model ReviewReply {
  id        String   @id @default(uuid())
  content   String
  reviewId  String
  userId    String   // Business owner who replied
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  review    Review   @relation(fields: [reviewId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Payment {
  id         String      @id @default(uuid())
  type       PaymentType
  number     String
  verified   Boolean     @default(false)
  businessId String
  addedAt    DateTime    @default(now())
  business   Business    @relation(fields: [businessId], references: [id])
}

model TrustScore {
  id         String   @id @default(uuid())
  grade      String
  score      Int
  businessId String   @unique
  factors    Json?
  updatedAt  DateTime @updatedAt
  business   Business @relation(fields: [businessId], references: [id])
}

model FraudReport {
  id          String       @id @default(uuid())
  reporterId  String
  businessId  String
  reason      String
  description String?
  status      ReportStatus @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  business    Business     @relation(fields: [businessId], references: [id])
  reporter    User         @relation(fields: [reporterId], references: [id])
}

model BusinessCategory {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  createdAt   DateTime   @default(now())
  businesses  Business[]
}

enum DocumentType {
  BUSINESS_DOCUMENT
  BUSINESS_REGISTRATION
  TAX_CERTIFICATE
  TRADE_LICENSE
  BANK_STATEMENT
  UTILITY_BILL
  ID_COPY
  PROOF_OF_ADDRESS
  OTHER
}

enum BusinessStatus {
  PENDING
  DOCUMENTS_REQUIRED
  UNDER_REVIEW
  VERIFIED
  REJECTED
  SUSPENDED
}

enum UserRole {
  CUSTOMER
  BUSINESS_OWNER
  ADMIN
}

enum AuthProvider {
  LOCAL
  GOOGLE
  FACEBOOK
  TWITTER
}

enum PaymentType {
  TILL
  PAYBILL
  BANK
}

enum ReportStatus {
  PENDING
  UNDER_REVIEW
  RESOLVED
  DISMISSED
}
